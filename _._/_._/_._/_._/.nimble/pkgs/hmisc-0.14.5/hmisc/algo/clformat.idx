dvMinimal	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#dvMinimal	HDisplayVerbosity.dvMinimal	
dvNormal	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#dvNormal	HDisplayVerbosity.dvNormal	
dvVerbose	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#dvVerbose	HDisplayVerbosity.dvVerbose	
dvDataDump	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#dvDataDump	HDisplayVerbosity.dvDataDump	
HDisplayVerbosity	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#HDisplayVerbosity	clformat: HDisplayVerbosity	
dfColored	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#dfColored	HDisplayFlag.dfColored	
dfPositionIndexed	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#dfPositionIndexed	HDisplayFlag.dfPositionIndexed	
dfPathIndexed	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#dfPathIndexed	HDisplayFlag.dfPathIndexed	
dfUnicodeNewlines	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#dfUnicodeNewlines	HDisplayFlag.dfUnicodeNewlines	
dfUnicodePPrint	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#dfUnicodePPrint	HDisplayFlag.dfUnicodePPrint	
dfWithRanges	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#dfWithRanges	HDisplayFlag.dfWithRanges	
dfSpellEmptyStrings	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#dfSpellEmptyStrings	HDisplayFlag.dfSpellEmptyStrings	
dfUseCommas	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#dfUseCommas	HDisplayFlag.dfUseCommas	
dfUseQuotes	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#dfUseQuotes	HDisplayFlag.dfUseQuotes	
HDisplayFlag	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#HDisplayFlag	clformat: HDisplayFlag	
HDisplayOpts	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#HDisplayOpts	clformat: HDisplayOpts	
defaultHDisplay	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#defaultHDisplay	clformat: defaultHDisplay	
contains	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#contains,HDisplayOpts,HDisplayFlag	clformat: contains(opts: HDisplayOpts; flag: HDisplayFlag): bool	
hdisplay	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#hdisplay.m,varargs[untyped]	clformat: hdisplay(body: varargs[untyped]): untyped	
colored	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#colored,HDisplayOpts	clformat: colored(opts: HDisplayOpts): bool	
positionIndexed	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#positionIndexed,HDisplayOpts	clformat: positionIndexed(opts: HDisplayOpts): bool	
pathIndexed	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#pathIndexed,HDisplayOpts	clformat: pathIndexed(opts: HDisplayOpts): bool	
withRanges	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#withRanges,HDisplayOpts	clformat: withRanges(opts: HDisplayOpts): bool	
toRomanNumeral	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#toRomanNumeral,int	clformat: toRomanNumeral(x: int): string	
toPluralNoun	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#toPluralNoun,ColoredText,int,bool,ColoredText	clformat: toPluralNoun(noun: ColoredText; count: int; addNum: bool = true;\n             plural: ColoredText = default(ColoredText)): ColoredText	
joinWords	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#joinWords,seq[ColoredText],ColoredText,char,ColoredText	clformat: joinWords(words: seq[ColoredText]; sepWord: ColoredText; quote: char = &apos;\&apos;&apos;;\n          empty: ColoredText = default(ColoredText)): ColoredText	
joinAnyOf	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#joinAnyOf,seq[ColoredText],char,ColoredText,ColoredText,ColoredText,ColoredText	clformat: joinAnyOf(words: seq[ColoredText]; quote: char = &apos;\&apos;&apos;;\n          prefix: ColoredText = clt(&quot;any of &quot;); empty: ColoredText = clt(&quot;no&quot;);\n          sepWord: ColoredText = clt(&quot;or&quot;); suffix: ColoredText = clt(&quot;&quot;)): ColoredText	
namedItemListing	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#namedItemListing,ColoredText,seq[ColoredText],ColoredText,char	clformat: namedItemListing(name: ColoredText; words: seq[ColoredText];\n                 sepWord: ColoredText; quote: char = &apos;\x00&apos;): ColoredText	
toLatinNamedChar	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#toLatinNamedChar,char	clformat: toLatinNamedChar(ch: char): seq[string]	
toLatinAbbrChar	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#toLatinAbbrChar,char	clformat: toLatinAbbrChar(ch: char): string	
toDescriptiveIdent	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#toDescriptiveIdent,string,array[char,Option[string]],set[char]	clformat: toDescriptiveIdent(text: string; override: array[char, Option[string]] = default(\n    array[char, Option[string]]); allowed: set[char] = IdentChars): string	
toUnicodeSubChar	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#toUnicodeSubChar,char	clformat: toUnicodeSubChar(c: char): string	
toUnicodeSupChar	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#toUnicodeSupChar,char	clformat: toUnicodeSupChar(c: char): string	
texIdents	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#texIdents	clformat: texIdents	
extendedAsciiNames	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#extendedAsciiNames	clformat: extendedAsciiNames	
asciiName	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#asciiName,char,bool	clformat: asciiName(ch: char; slash: bool = false): string	
unicodeName	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#unicodeName,char	clformat: unicodeName(ch: char): string	
describeChar	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#describeChar,char,HDisplayOpts	clformat: describeChar(ch: char; opts: HDisplayOpts = defaultHDisplay): string	
describeChar	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#describeChar,Rune	clformat: describeChar(rune: Rune): string	
describeSet	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#describeSet,set[S],openArray[]	clformat: describeSet[S](s: set[S]; sets: openArray[(set[S], string)]): string	
describeCharset	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#describeCharset,set[char]	clformat: describeCharset(s: set[char]): string	
AsciiMath	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#AsciiMath	clformat: AsciiMath	
fromTexToUnicodeMath	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#fromTexToUnicodeMath,string	clformat: fromTexToUnicodeMath(tex: string): string	
CharBox	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#CharBox	clformat: CharBox	
CharBrace	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#CharBrace	clformat: CharBrace	
asRegular	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#asRegular	AsciiStyle.asRegular	
asInverted	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#asInverted	AsciiStyle.asInverted	
asFraktur	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#asFraktur	AsciiStyle.asFraktur	
asBoldFraktur	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#asBoldFraktur	AsciiStyle.asBoldFraktur	
asDoubleStruck	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#asDoubleStruck	AsciiStyle.asDoubleStruck	
asBold	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#asBold	AsciiStyle.asBold	
asItalic	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#asItalic	AsciiStyle.asItalic	
asBoldItalic	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#asBoldItalic	AsciiStyle.asBoldItalic	
asScript	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#asScript	AsciiStyle.asScript	
asBoldScript	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#asBoldScript	AsciiStyle.asBoldScript	
asSansSerif	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#asSansSerif	AsciiStyle.asSansSerif	
asBoldSansSerif	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#asBoldSansSerif	AsciiStyle.asBoldSansSerif	
asItalicSansSerif	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#asItalicSansSerif	AsciiStyle.asItalicSansSerif	
asItalicBoldSansSerif	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#asItalicBoldSansSerif	AsciiStyle.asItalicBoldSansSerif	
asMonospace	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#asMonospace	AsciiStyle.asMonospace	
AsciiStyle	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#AsciiStyle	clformat: AsciiStyle	
isTextChar	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#isTextChar,char	clformat: isTextChar(c: char): bool	
toStylizedAscii	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#toStylizedAscii,char,AsciiStyle	clformat: toStylizedAscii(c: char; style: AsciiStyle): string	
namedCardinal	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#namedCardinal,int	clformat: namedCardinal(num: int): string	
namedNumTuple	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#namedNumTuple,int	clformat: namedNumTuple(num: int): string	
toNamedMultichar	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#toNamedMultichar,string	clformat: toNamedMultichar(str: string): seq[(string, string, int)]	
toNamedMulticharJoin	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#toNamedMulticharJoin,string,bool,bool	clformat: toNamedMulticharJoin(str: string; lowerStart: bool = true;\n                     singlename: bool = false): string	
fromTexToUnicode	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#fromTexToUnicode,string,bool,bool	clformat: fromTexToUnicode(str: string; isSub: bool = false; isSup: bool = false): string	
unicodifyIdent	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#unicodifyIdent,string	clformat: unicodifyIdent(str: string): string	
hFormat	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#hFormat,openArray[T]	clformat: hFormat[T](s: openArray[T]): string	
hShow	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#hShow,char,HDisplayOpts	clformat: hShow(ch: char; opts: HDisplayOpts = defaultHDisplay): ColoredText	
hshow	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#hshow,bool,HDisplayOpts	clformat: hshow(b: bool; opts: HDisplayOpts = defaultHDisplay): ColoredText	
hShow	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#hShow,SomeInteger,HDisplayOpts	clformat: hShow(ch: SomeInteger; opts: HDisplayOpts = defaultHDisplay): ColoredText	
hshow	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#hshow,BackwardsIndex,HDisplayOpts	clformat: hshow(i: BackwardsIndex; opts: HDisplayOpts = defaultHDisplay): ColoredText	
hshow	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#hshow,float,HDisplayOpts	clformat: hshow(ch: float; opts: HDisplayOpts = defaultHDisplay): ColoredText	
hShow	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#hShow,Slice[int],HDisplayOpts	clformat: hShow(ch: Slice[int]; opts: HDisplayOpts = defaultHDisplay): ColoredText	
hShow	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#hShow,HSlice[A,B],HDisplayOpts	clformat: hShow[A, B](slice: HSlice[A, B]; opts: HDisplayOpts = defaultHDisplay): ColoredText	
hshow	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#hshow,seq[T],HDisplayOpts	clformat: hshow[T](s: seq[T]; opts: HDisplayOpts = defaultHDisplay): ColoredText	
replaceTailNewlines	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#replaceTailNewlines,ColoredText,ColoredRune	clformat: replaceTailNewlines(buf: var ColoredText;\n                    replaceWith: ColoredRune = uc&quot;⮒&quot; + defaultPrintStyling): int	
replaceNewlines	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#replaceNewlines,ColoredText,ColoredRune	clformat: replaceNewlines(buf: ColoredText;\n                replaceWith: ColoredRune = uc&quot;⮒&quot; + defaultPrintStyling): ColoredText	
addIndent	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#addIndent,ColoredText,int,int,ColoredRune	clformat: addIndent(res: var ColoredText; level: int; sep: int = 2;\n          prefix: ColoredRune = clr(&apos; &apos;))	
coloredResult	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#coloredResult.t	clformat: coloredResult(): untyped	
joinPrefix	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#joinPrefix,int,seq[int],bool,bool	clformat: joinPrefix(level: int; idx: seq[int]; pathIndexed, positionIndexed: bool): ColoredText	
joinPrefix	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#joinPrefix,int,seq[int],HDisplayOpts	clformat: joinPrefix(level: int; idx: seq[int]; opts: HDisplayOpts): ColoredText	
hShow	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#hShow,string,HDisplayOpts	clformat: hShow(str: string; opts: HDisplayOpts = defaultHDisplay): ColoredText	
hshow	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#hshow,cstring,HDisplayOpts	clformat: hshow(s: cstring; opts: HDisplayOpts = defaultHDisplay): ColoredText	
hShow	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#hShow,E,HDisplayOpts	clformat: hShow[E: enum](e: E; opts: HDisplayOpts = defaultHDisplay): ColoredText	
hshow	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#hshow,,HDisplayOpts	clformat: hshow(n: typeof(nil); opts: HDisplayOpts = defaultHDisplay): ColoredText	
hShow	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#hShow,set[I],HDisplayOpts	clformat: hShow[I](s: set[I]; opts: HDisplayOpts = defaultHDisplay): ColoredText	
describeStrPos	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#describeStrPos,string,int,int,int,HDisplayOpts	clformat: describeStrPos(base: string; pos: int; before: int = 6; after: int = 12;\n               opts: HDisplayOpts = defaultHDisplay): ColoredText	
formatStringified	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#formatStringified,string	clformat: formatStringified(str: string): string	
wrap	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#wrap,ColoredText,ColorTextConvertible	clformat: wrap(text: ColoredText; around: ColorTextConvertible): ColoredText	
joinc	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#joinc,seq[ColoredText],string	clformat: joinc(text: seq[ColoredText]; sep: string): ColoredText	
getEditVisual	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#getEditVisual,seq[T],seq[T],seq[LevEdit],proc(T),HDisplayOpts	clformat: getEditVisual[T](src, target: seq[T]; ops: seq[LevEdit];\n                 conv: proc (t: T): string; opts: HDisplayOpts = defaultHDisplay): ColoredText	
stringEditMessage	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#stringEditMessage,string,string,bool,int,int	clformat: stringEditMessage(source, target: string; detailed: bool = true;\n                  windowSize: int = 4; longThreshold: int = 6): ColoredText	
stringMismatchMessage	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#stringMismatchMessage,string,openArray[string],bool,bool,bool	clformat: stringMismatchMessage(input: string; expected: openArray[string];\n                      colored: bool = true; fixSuggestion: bool = true;\n                      showAll: bool = false): ColoredText	
colorDollar	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#colorDollar,T	clformat: colorDollar[T](arg: T): ColoredText	
splitKeepSpaces	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#splitKeepSpaces,string	clformat: splitKeepSpaces(str: string): seq[string]	
formatDiffed	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#formatDiffed,seq[LevEdit[T]],seq[T],seq[T],int	clformat: formatDiffed[T](ops: seq[LevEdit[T]]; oldSeq, newSeq: seq[T];\n                maxUnchanged: int = 5): tuple[oldLine, newLine: ColoredText]	
formatDiffed	_._/_._/_._/_._/.nimble/pkgs/hmisc-0.14.5/hmisc/algo/clformat.html#formatDiffed,ShiftedDiff,openArray[T],openArray[T],proc(T),int,int,bool,proc(string),int	clformat: formatDiffed[T](shifted: ShiftedDiff; oldSeq, newSeq: openArray[T];\n                strConv: proc (t: T): string = dollar[T]; maxUnchanged: int = 5;\n                maxUnchangedWords: int = high(int); showLines: bool = false;\n                wordSplit: proc (str: string): seq[string] = splitKeepSpaces;\n                stackLongLines: int = high(int)): ColoredText	
