madd	hmisc/core/msgbuilder.html#madd,string,varargs[string,]	msgbuilder: madd(ms: var string; args: varargs[string, `$`])	
msep	hmisc/core/msgbuilder.html#msep,string,string,bool	msgbuilder: msep(ms: var string; s: string; expr: bool)	
mq	hmisc/core/msgbuilder.html#mq,T	msgbuilder: mq[T](item: T): string	
mkind	hmisc/core/msgbuilder.html#mkind,E	msgbuilder: mkind[E: enum](item: E): string	
mq1	hmisc/core/msgbuilder.html#mq1,T	msgbuilder: mq1[T](item: T): string	
mcode	hmisc/core/msgbuilder.html#mcode,string	msgbuilder: mcode(str: string): string	
mblock	hmisc/core/msgbuilder.html#mblock,string,string,string,string,string	msgbuilder: mblock(str: string; startN, finalN: string = &quot;‘‘‘&quot;;\n       start1, final1: string = &quot;‘&quot;): string	
mitem	hmisc/core/msgbuilder.html#mitem,string,T	msgbuilder: mitem[T](s: var string; item: T)	
mwrap	hmisc/core/msgbuilder.html#mwrap.t,string,string,untyped	msgbuilder: mwrap(s: var string; wrap: string; body: untyped): untyped	
mexpected	hmisc/core/msgbuilder.html#mexpected,string,T,bool	msgbuilder: mexpected[T](s: var string; item: T; expr: bool = true)	
mfound	hmisc/core/msgbuilder.html#mfound,string,F,E	msgbuilder: mfound[F, E](s: var string; found: F; expected: E)	
mfound	hmisc/core/msgbuilder.html#mfound,F,E	msgbuilder: mfound[F, E](found: F; expected: E): string	
toPluralNoun	hmisc/core/msgbuilder.html#toPluralNoun,string,int,bool,string	msgbuilder: toPluralNoun(noun: string; count: int; addNum: bool = true; plural: string = &quot;&quot;): string	
joinWords	hmisc/core/msgbuilder.html#joinWords,seq[string],string,char,string	msgbuilder: joinWords(words: seq[string]; sepWord: string; quote: char = &apos;\&apos;&apos;;\n          empty: string = default(string)): string	
joinAnyOf	hmisc/core/msgbuilder.html#joinAnyOf,seq[string],char,string,string,string,string	msgbuilder: joinAnyOf(words: seq[string]; quote: char = &apos;\&apos;&apos;; prefix: string = &quot;any of &quot;;\n          empty: string = &quot;no&quot;; sepWord: string = &quot;or&quot;; suffix: string = &quot;&quot;): string	
namedItemListing	hmisc/core/msgbuilder.html#namedItemListing,string,seq[string],string,char	msgbuilder: namedItemListing(name: string; words: seq[string]; sepWord: string;\n                 quote: char = &apos;\x00&apos;): string	
kindToStr	hmisc/core/msgbuilder.html#kindToStr.t,typed	msgbuilder: kindToStr(expr: typed): untyped	
