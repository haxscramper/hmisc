toLineInfo	hmisc/core/code_errors.html#toLineInfo,InstantiationInfo	code_errors: toLineInfo(arg: InstantiationInfo): LineInfo	
startpos	hmisc/core/code_errors.html#startpos,NimNode	code_errors: startpos(node: NimNode): LineInfo	
toColorString	hmisc/core/code_errors.html#toColorString,CodeError	code_errors: toColorString(err: CodeError): string	
toCodeError	hmisc/core/code_errors.html#toCodeError,NimNode,string,string,int,LineInfo	code_errors: toCodeError(node: NimNode; message: string; annotation: string = &quot;&quot;;\n            lineRange: int = -2; iinfo: LineInfo = LineInfo()): CodeError	
toCodeError	hmisc/core/code_errors.html#toCodeError,string,int,int,string,string	code_errors: toCodeError(str: string; offset, exprLen: int; message, annotation: string): CodeError	
toCodeError	hmisc/core/code_errors.html#toCodeError,openArray[tuple[NimNode,string]],string,LineInfo	code_errors: toCodeError(nodes: openArray[tuple[node: NimNode, annot: string]];\n            message: string; iinfo: LineInfo = (filename: &quot;???&quot;, line: 0,\n    column: -1).toLineInfo()): CodeError	
toStaticMessage	hmisc/core/code_errors.html#toStaticMessage,LineInfo,string,string,string,LineInfo	code_errors: toStaticMessage(errpos: LineInfo; expr: string; message: string; annot: string;\n    iinfo: LineInfo = (filename: &quot;???&quot;, line: 0, column: -1).toLineInfo()): string	
toStaticMessage	hmisc/core/code_errors.html#toStaticMessage,NimNode,string,string,LineInfo	code_errors: toStaticMessage(node: NimNode; message: string; annot: string; iinfo: LineInfo = (\n    filename: &quot;???&quot;, line: 0, column: -1).toLineInfo()): string	
toStaticMessage	hmisc/core/code_errors.html#toStaticMessage,InstantiationInfo,string,string,string	code_errors: toStaticMessage(errpos: InstantiationInfo; expr: string; message: string;\n                annot: string): string	
hxInfo	hmisc/core/code_errors.html#hxInfo.t	code_errors: hxInfo(): untyped	
staticAssert	hmisc/core/code_errors.html#staticAssert.t,untyped,string,string,InstantiationInfo	code_errors: staticAssert(assrt: untyped; message, annotation: string;\n             iinfo: InstantiationInfo): untyped	
toCompilesAssert	hmisc/core/code_errors.html#toCompilesAssert,LineInfo,string,NimNode,string,bool	code_errors: toCompilesAssert(errpos: LineInfo; expr: string; compileBody: NimNode;\n                 annotation: string; addBody: bool = true): NimNode	
toCompilesAssert	hmisc/core/code_errors.html#toCompilesAssert,NimNode,NimNode,string,bool	code_errors: toCompilesAssert(node, compileBody: NimNode; annotation: string;\n                 addBody: bool = false): NimNode	
assertNodeIt	hmisc/core/code_errors.html#assertNodeIt.t,NimNode,untyped,untyped,string,LineInfo	code_errors: assertNodeIt(node: NimNode; cond: untyped; msg: untyped; annot: string = &quot;&quot;;\n             iinfo: LineInfo = LineInfo()): untyped	
assertNodeKind	hmisc/core/code_errors.html#assertNodeKind.t,NimNode,set[NimNodeKind]	code_errors: assertNodeKind(node: NimNode; kindSet: set[NimNodeKind]): untyped	
assertNodeKindNot	hmisc/core/code_errors.html#assertNodeKindNot,NimNode,set[NimNodeKind],LineInfo	code_errors: assertNodeKindNot(node: NimNode; kindSet: set[NimNodeKind]; iinfo: LineInfo = (\n    filename: &quot;???&quot;, line: 0, column: -1).toLineInfo()): void	
raiseCodeError	hmisc/core/code_errors.html#raiseCodeError.t,NimNode,string,string,int	code_errors: raiseCodeError(node: NimNode; message: string; annotation: string = &quot;&quot;;\n               linerange: int = -2): untyped	
getCEx	hmisc/core/code_errors.html#getCEx.t,untyped	code_errors: getCEx(t: untyped): untyped	
printSeparator	hmisc/core/code_errors.html#printSeparator,string	code_errors: printSeparator(msg: string): void	
wipeNewlined	hmisc/core/code_errors.html#wipeNewlined	code_errors: wipeNewlined()	
getFileName	hmisc/core/code_errors.html#getFileName,string	code_errors: getFileName(f: string): string	
pprintStackTrace	hmisc/core/code_errors.html#pprintStackTrace.t,ref.Exception	code_errors: pprintStackTrace(ex: ref Exception = nil): untyped	
haxStackTrace	hmisc/core/code_errors.html#haxStackTrace.t	code_errors: haxStackTrace(): untyped	
pprintErr	hmisc/core/code_errors.html#pprintErr.t	code_errors: pprintErr(): untyped	
